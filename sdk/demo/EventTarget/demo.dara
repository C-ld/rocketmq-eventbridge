import Util;
import OpenApi;
import SDKClient;
import Console;

type @config = OpenApi.Config;
type @sdkClient = SDKClient;
type @endpoint = string;

init(){
    @endpoint = '127.0.0.1:7001';
    @config = new OpenApi.Config{
        endpoint = @endpoint
    };
    @sdkClient = new SDKClient(@config);
}

/**
  EventTarget Controller apis:
    * createEventTargets *
    * updateEventTargets *
    * deleteEventTargets *
    * listEventTargets   *
*/

async function testCreateEventTargets(): void {
    var request = new SDKClient.CreateEventTargetsRequest{
        eventBusName = 'newBus',
        eventRuleName = 'newRule',
        eventTargets = [
            {
                eventTargetName = 'new-file-target',
                className = 'http',
                config = {
                    fileName = "~/newTarget",
                    line = "{    \"form\":\"JSONPATH\",    \"value\":\"$.data\"}"
                }
            },
            {
                eventTargetName = 'target2',
                className = 'acs.eventbridge',
            },
        ]
    };

    try {
        var res = @sdkClient.createEventTargets(request);
        Console.log(Util.toJSONString(res.body));
    } catch(err) {
        Console.log('err!');
        Console.log(err.message);
    } finally {
        Console.log('test end!');
    }
    
}

async function testUpdateEventTargets(): void {
    var request = new SDKClient.UpdateEventTargetsRequest{
        eventBusName = 'newBus',
        eventRuleName = 'newRule',
        eventTargets = [
            {
                eventTargetName = 'new-file-target',
                className = '**file**',
                config = {
                    fileName = "~/newTarget2",
                    line = "{    \"form\":\"JSONPATH\",    \"value\":\"$.data\"}"
                }
            },
            {
                eventTargetName = 'target2',
                className = 'http',
            },
        ]
    };

    try {
        var res = @sdkClient.updateEventTargets(request);
        Console.log(Util.toJSONString(res.body));
    } catch(err) {
        Console.log('err!');
        Console.log(err.message);
    } finally {
        Console.log('test end!');
    }
    
}

async function testDeleteEventTargets(): void {
    var request = new SDKClient.DeleteEventTargetsRequest{
        eventBusName = 'newBus',
        eventRuleName = 'newRule',
        eventTargetNames = ["new-file-target", "target2"]
    };

    try {
        var res = @sdkClient.deleteEventTargets(request);
        Console.log(Util.toJSONString(res.body));
    } catch(err) {
        Console.log('err!');
        Console.log(err.message);
    } finally {
        Console.log('test end!');
    }
    
}

async function testListEventTargets(): void {
    var request = new SDKClient.ListEventTargetsRequest{
        eventBusName = 'newBus',
        eventRuleName = 'newRule'
    };

    try {
        var res = @sdkClient.listEventTargets(request);
        Console.log(Util.toJSONString(res.body));
    } catch(err) {
        Console.log('err!');
        Console.log(err.message);
    } finally {
        Console.log('test end!');
    }
    
}
