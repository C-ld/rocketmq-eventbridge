import Util
import OpenApi

extends OpenApi;

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  var result: string = "";
  if (!Util.empty(network) && !Util.equalString(network, "public")) {
    network = `-${network}`;
  } else {
    network = "";
  }
  if (!Util.isUnset(suffix)) {
    suffix = "";
  } else {
    suffix = `-${suffix}`;
  }
  if (Util.equalString(endpointRule, "regional")) {
    if (Util.empty(regionId)) {
      throw{
        message = "RegionId is empty, please set a valid RegionId"
      };
    }
    result = `${productId}${suffix}${network}.${regionId}.aliyuncs.com`;
  } else {
    result = `${productId}${suffix}${network}.aliyuncs.com`;
  }
  return result;
  // return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eventbridge', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

/**
  EventBus Controller apis:
    * createEventBus *
    * getEventBus    *
    * deleteEventBus *
    * listEventBuses *
*/

model CreateEventBusRequest {
  description?: string(name='description', description='The description of the event bus.', example='demo'),
  eventBusName?: string(name='eventBusName', description='The name of the event bus. This parameter is required.', example='MyEventBus'),
}

model CreateEventBusResponseBody {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='Success'),
  data?: {
    eventBusARN?: string(name='eventBusARN', description='The Alibaba Cloud Resource Name (ARN) of the event bus.', example='acs:eventbridge:cn-hangzhou:123456789098****:eventbus/MyEventBus'),
  }(name='data', description='The returned data.'),
  message?: string(name='message', description='The returned error message.', example='The event bus [xxxx] not existed!'),
  requestId?: string(name='requestId', description='The request ID.', example='A995F07C-E503-5881-9962-9CECA8566876'),
  success?: boolean(name='success', description='Indicates whether the request is successful. The value true indicates that the request is successful.', example='true'),
}

model CreateEventBusResponse {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEventBusResponseBody(name='body'),
}

/**
 * @summary Creates an event bus.
 *
 * @description You can call this API operation to create an event bus.
 *
 * @param request CreateEventBusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEventBusResponse
 */
async function createEventBusWithOptions(request: CreateEventBusRequest, runtime: Util.RuntimeOptions): CreateEventBusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.eventBusName)) {
    body['eventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{
    body = Util.toJSONString(body)
  };
  var params = new OpenApi.Params{
    action = 'CreateEventBus',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/bus/createEventBus',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an event bus.
 *
 * @description You can call this API operation to create an event bus.
 *
 * @param request CreateEventBusRequest
 * @return CreateEventBusResponse
 */
async function createEventBus(request: CreateEventBusRequest): CreateEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventBusWithOptions(request, runtime);
}


model GetEventBusRequest {
  eventBusName?: string(name='eventBusName', description='The name of the event bus. This parameter is required.', example='MyEventBus'),
}

model GetEventBusResponseBody = {
  code?: string(name='code', description='The response code. The value Success indicates that the request is successful.', example='Success'),
  createTimestamp?: long(name='createTimestamp', description='The timestamp that indicates when the event bus was created.', example='1641781825000'),
  description?: string(name='description', description='The description of the event bus.', example='demo'),
  eventBusName?: string(name='eventBusName', description='The name of the event bus.', example='MyEventBus'),
  message?: string(name='message', description='The error message that is returned if the request failed.', example='EventBusNotExist'),
  requestId?: string(name='requestId', description='The request ID.', example='d5bfc188-4452-4ba7-b73a-a9005e522439'),
}

model GetEventBusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventBusResponseBody(name='body'),
}

/**
 * @summary Queries the detailed information about an event bus.
 *
 * @description You can call this API operation to query the detailed information about an event bus.
 *
 * @param request GetEventBusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEventBusResponse
 */
async function getEventBusWithOptions(request: GetEventBusRequest, runtime: Util.RuntimeOptions): GetEventBusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventBusName)) {
    body['eventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body)
  };
  var params = new OpenApi.Params{
    action = 'GetEventBus',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/bus/getEventBus',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the detailed information about an event bus.
 *
 * @description You can call this API operation to query the detailed information about an event bus.
 *
 * @param request GetEventBusRequest
 * @return GetEventBusResponse
 */
async function getEventBus(request: GetEventBusRequest): GetEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEventBusWithOptions(request, runtime);
}

model ListEventBusesRequest {
  maxResults?: int32(name='maxResults', description='The maximum number of entries to be returned in a call. You can use this parameter and NextToken to implement paging. Note: Up to 100 entries can be returned in a call.', example='10'),
  nextToken?: string(name='nextToken', description='If you set Limit and excess return values exist, this parameter is returned.', example='10'),
}

model ListEventBusesResponseBody {
  code?: string(name='code', description='The returned HTTP status code. The HTTP status code 200 indicates that the request is successful.', example='200'),
  eventBuses?: [ 
    {
      description?: string(name='description', description='The description of the queried event bus.', example='bus_description'),
      eventBusName?: string(name='eventBusName', description='The name of the queried event bus.', example='default'),
    }
  ](name='eventBuses', description='The timestamp that indicates when the event bus was created.'),
  nextToken?: string(name='nextToken', description='If excess return values exist, this parameter is returned.', example='10'),
  total?: int32(name='total', description='The total number of entries.', example='2'),
  message?: string(name='message', description='The returned error message.', example='InvalidArgument'),
  requestId?: string(name='requestId', description='The request ID.', example='D1DCF64A-3F2C-5323-ADCB-3F4DF30FAD2D'),
  maxResults?: int32(name="maxResults", description='If you set Limit and excess return values exist, this parameter is returned.', example='10')
}

model ListEventBusesResponse {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventBusesResponseBody(name='body'),
}

/**
 * @summary Queries all event buses.
 *
 * @description You can call this API operation to query all event buses.
 *
 * @param request ListEventBusesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEventBusesResponse
 */
async function listEventBusesWithOptions(request: ListEventBusesRequest, runtime: Util.RuntimeOptions): ListEventBusesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body)
  };

  var params = new OpenApi.Params{
    action = 'ListEventBuses',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/bus/listEventBuses',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all event buses.
 *
 * @description You can call this API operation to query all event buses.
 *
 * @param request ListEventBusesRequest
 * @return ListEventBusesResponse
 */
async function listEventBuses(request: ListEventBusesRequest): ListEventBusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventBusesWithOptions(request, runtime);
}

model DeleteEventBusRequest {
  eventBusName?: string(name='eventBusName', description='The name of the event bus. This parameter is required.', example='MyEventBus'),
}

model DeleteEventBusResponseBody = {
  code?: string(name='code', description='The returned HTTP status code. The HTTP status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='message', description='The returned error message.', example='EventBusNotExist'),
  requestId?: string(name='requestId', description='The request ID.', example='C229E140-1A5C-5D55-8904-CFC5BA4CAA98'),
}

model DeleteEventBusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventBusResponseBody(name='body'),
}

/**
 * @summary Deletes an event bus.
 *
 * @description You can call this API operation to delete an event bus.
 *
 * @param request DeleteEventBusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEventBusResponse
 */
async function deleteEventBusWithOptions(request: DeleteEventBusRequest, runtime: Util.RuntimeOptions): DeleteEventBusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventBusName)) {
    body['eventBusName'] = request.eventBusName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body)
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventBus',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/bus/deleteEventBus',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an event bus.
 *
 * @description You can call this API operation to delete an event bus.
 *
 * @param request DeleteEventBusRequest
 * @return DeleteEventBusResponse
 */
async function deleteEventBus(request: DeleteEventBusRequest): DeleteEventBusResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventBusWithOptions(request, runtime);
}



/**
  ApiDestination Controller apis:
    * createApiDestination *
    * updateApiDestination *
    * getApiDestination    *
    * deleteApiDestination *
    * listApiDestinations  *
*/

model CreateApiDestinationRequest {
  apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination. The name must be 2 to 127 characters in length. This parameter is required.', example='api-destination-name'),
  connectionName?: string(name='connectionName', description='The name of the connection. The name must be 2 to 127 characters in length. Before you configure this parameter, you must call the CreateConnection operation to create a connection. Then, set this parameter to the name of the connection that you created. This parameter is required.', example='connection-name'),
  description?: string(name='description', description='The description of the API destination. The description can be up to 255 characters in length.'),
  httpApiParameters?: {
    endpoint?: string(name='endpoint', description='The endpoint of the API destination. The endpoint can be up to 127 characters in length. This parameter is required.', example='http://127.0.0.1:8001/api'),
    method?: string(name='method', description='The HTTP request method. Valid values: \n

      *   GET \n
      *   POST \n
      *   HEAD \n
      *   DELETE \n
      *   PUT \n
      *   PATCH \n

      This parameter is required.', example='POST'),
    apiParameters?: [ 
      {
        name?: string(name='name'),
        description?: string(name='description', description='The description of the API destination. The description can be up to 255 characters in length.'),
        type?: string(name='type'),
        defaultValue?: string(name='defaultValue'),
        in?: string(name='in')
      } 
    ](name='apiParameters', description='TODO')
  }(name='httpApiParameters', description='The parameters that are configured for the API destination. This parameter is required.'),
  invocationRateLimitPerSecond?: integer(name='invocationRateLimitPerSecond', description='TODO')
}

model CreateApiDestinationResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination.', example='ApiDestinationName'),
  message?: string(name='message', description='The returned message.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='5DAF96FB-A4B6-548C-B999-0BFDCB2261B9'),
}

model CreateApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiDestinationResponseBody(name='body'),
}

/**
 * @summary Creates an API destination.
 *
 * @description You can call this API operation to create an API destination.
 *
 * @param request CreateApiDestinationRequest (tmpReq before)
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateApiDestinationResponse
 */
async function createApiDestinationWithOptions(request: CreateApiDestinationRequest, runtime: Util.RuntimeOptions): CreateApiDestinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    body['apiDestinationName'] = request.apiDestinationName;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.httpApiParameters)) {
    body['httpApiParameters'] = request.httpApiParameters;
  }
  if (!Util.isUnset(request.invocationRateLimitPerSecond)) {
    body['invocationRateLimitPerSecond'] = request.invocationRateLimitPerSecond;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiDestination',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/api-destination/createApiDestination',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an API destination.
 *
 * @description You can call this API operation to create an API destination.
 *
 * @param request CreateApiDestinationRequest
 * @return CreateApiDestinationResponse
 */
async function createApiDestination(request: CreateApiDestinationRequest): CreateApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiDestinationWithOptions(request, runtime);
}

model UpdateApiDestinationRequest {
  apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination. The name must be 2 to 127 characters in length. This parameter is required.', example='api-destination-name'),
  connectionName?: string(name='connectionName', description='The name of the connection. The name must be 2 to 127 characters in length. Before you configure this parameter, you must call the CreateConnection operation to create a connection. Then, set this parameter to the name of the connection that you created. This parameter is required.', example='connection-name'),
  description?: string(name='description', description='The description of the API destination. The description can be up to 255 characters in length.'),
  httpApiParameters?: {
    endpoint?: string(name='endpoint', description='The endpoint of the API destination. The endpoint can be up to 127 characters in length. This parameter is required.', example='http://127.0.0.1:8001/api'),
    method?: string(name='method', description='The HTTP request method. Valid values: \n

      *   GET \n
      *   POST \n
      *   HEAD \n
      *   DELETE \n
      *   PUT \n
      *   PATCH \n

      This parameter is required.', example='POST'),
    apiParameters?: [ 
      {
        name?: string(name='name'),
        description?: string(name='description', description='The description of the API destination. The description can be up to 255 characters in length.'),
        type?: string(name='type'),
        defaultValue?: string(name='defaultValue'),
        in?: string(name='in')
      } 
    ](name='apiParameters', description='TODO')
  }(name='httpApiParameters', description='The parameters that are configured for the API destination. This parameter is required.'),
  invocationRateLimitPerSecond?: integer(name='invocationRateLimitPerSecond', description='TODO')
}

model UpdateApiDestinationResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='message', description='The returned message.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='5DAF96FB-A4B6-548C-B999-0BFDCB2261B9'),
}

model UpdateApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApiDestinationResponseBody(name='body'),
}

/**
 * @summary Updates an API destination.
 *
 * @description You can call this API operation to update an API destination.
 *
 * @param request UpdateApiDestinationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateApiDestinationResponse
 */
async function updateApiDestinationWithOptions(request: UpdateApiDestinationRequest, runtime: Util.RuntimeOptions): UpdateApiDestinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    body['apiDestinationName'] = request.apiDestinationName;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.httpApiParameters)) {
    body['httpApiParameters'] = request.httpApiParameters;
  }
  if (!Util.isUnset(request.invocationRateLimitPerSecond)) {
    body['invocationRateLimitPerSecond'] = request.invocationRateLimitPerSecond;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApiDestination',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/api-destination/updateApiDestination',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates an API destination.
 *
 * @description You can call this API operation to update an API destination.
 *
 * @param request UpdateApiDestinationRequest
 * @return UpdateApiDestinationResponse
 */
async function updateApiDestination(request: UpdateApiDestinationRequest): UpdateApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApiDestinationWithOptions(request, runtime);
}

model GetApiDestinationRequest {
  apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination. This parameter is required.', example='api-destination-name'),
}

model GetApiDestinationResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination.', example='api-destination-2'),
  connectionName?: string(name='connectionName', description='The connection name.', example='connection-name'),
  description?: string(name='description', description='The description of the connection.', example='demo'),
  gmtCreate?: long(name='gmtCreate', description='The time when the API destination was created.', example='1665223213000'),
  httpApiParameters?: {
    endpoint?: string(name='endpoint', description='The endpoint of the API destination.', example='http://127.0.0.1:8001/api'),
    method?: string(name='method', description='The HTTP request method. Valid values:\n
      - POST\n
      - GET\n
      - DELETE\n
      - PUT\n
      - HEAD\n
      - TRACE\n
      - PATCH', example='POST'),
    apiParameters?: [
      {
        name?: string(name='name'),
        description?: string(name='description', description='The description of the API destination. The description can be up to 255 characters in length.'),
        type?: string(name='type'),
        defaultValue?: string(name='defaultValue'),
        in?: string(name='in')
      }
    ](name="apiParameters", description="TODO")
  }(name='httpApiParameters', description='The request parameters that are configured for the API destination.'),
  invocationRateLimitPerSecond?: integer(name="invocationRateLimitPerSecond", description="TODO"),
  message?: string(name='message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='B896B484-F16D-59DE-9E23-DD0E5C361108'),
}

model GetApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApiDestinationResponseBody(name='body'),
}

/**
 * @summary Queries the information about an API destination.
 *
 * @description You can call this API operation to query the information about an API destination.
 *
 * @param request GetApiDestinationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetApiDestinationResponse
 */
async function getApiDestinationWithOptions(request: GetApiDestinationRequest, runtime: Util.RuntimeOptions): GetApiDestinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    body['apiDestinationName'] = request.apiDestinationName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'GetApiDestination',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/api-destination/getApiDestination',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about an API destination.
 *
 * @description You can call this API operation to query the information about an API destination.
 *
 * @param request GetApiDestinationRequest
 * @return GetApiDestinationResponse
 */
async function getApiDestination(request: GetApiDestinationRequest): GetApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApiDestinationWithOptions(request, runtime);
}

model DeleteApiDestinationRequest {
  apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination. This parameter is required.', example='ApiDestinationName'),
}

model DeleteApiDestinationResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='382E6272-8E9C-5681-AC96-A8AF0BFAC1A5'),
}

model DeleteApiDestinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiDestinationResponseBody(name='body'),
}

/**
 * @summary Deletes an API destination.
 *
 * @description You can call this API operation to delete an API destination.
 *
 * @param request DeleteApiDestinationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteApiDestinationResponse
 */
async function deleteApiDestinationWithOptions(request: DeleteApiDestinationRequest, runtime: Util.RuntimeOptions): DeleteApiDestinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDestinationName)) {
    body['apiDestinationName'] = request.apiDestinationName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApiDestination',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/api-destination/deleteApiDestination',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an API destination.
 *
 * @description You can call this API operation to delete an API destination.
 *
 * @param request DeleteApiDestinationRequest
 * @return DeleteApiDestinationResponse
 */
async function deleteApiDestination(request: DeleteApiDestinationRequest): DeleteApiDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiDestinationWithOptions(request, runtime);
}

model ListApiDestinationsRequest {
  apiDestinationNamePrefix?: string(name='apiDestinationNamePrefix', description='The prefix of the API destination name.', example='api-demo'),
  connectionName?: string(name='connectionName', description='The connection name.', example='connection-name'),
  maxResults?: integer(name='maxResults', description='The maximum number of entries to be returned in a call. You can use this parameter and NextToken to implement paging. \n
    *   Default value: 10.', example='10'),
  nextToken?: string(name='nextToken', description='If you set Limit and excess return values exist, this parameter is returned.\n
    *   Default value: 0.', example='0'),
}

model ListApiDestinationsResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  apiDestinations?: [ 
    {
      apiDestinationName?: string(name='apiDestinationName', description='The name of the API destination.', example='api-destination-2'),
      connectionName?: string(name='connectionName', description='The connection name.', example='connection-name'),
      description?: string(name='description', description='The description of the connection.', example='demo'),
      gmtCreate?: long(name='gmtCreate', description='The time when the API destination was created.', example='1665223213000'),
      httpApiParameters?: {
        endpoint?: string(name='endpoint', description='The endpoint of the API destination.', example='http://127.0.0.1:8001/api'),
        method?: string(name='method', description='The HTTP request method. Valid values:\n
          - POST\n
          - GET\n
          - DELETE\n
          - PUT\n
          - HEAD\n
          - TRACE\n
          - PATCH', example='POST'),
        apiParameters?: [
          {
            name?: string(name='name'),
            description?: string(name='description', description='The description of the API destination. The description can be up to 255 characters in length.'),
            type?: string(name='type'),
            defaultValue?: string(name='defaultValue'),
            in?: string(name='in')
          }
        ](name="apiParameters", description="TODO")
      }(name='httpApiParameters', description='The request parameters that are configured for the API destination.'),
      invocationRateLimitPerSecond?: integer(name="invocationRateLimitPerSecond", description="TODO")
    }
  ](name='apiDestinations', description='The API destinations.'),
  maxResults?: float(name='maxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='nextToken', description='If excess return values exist, this parameter is returned.', example='1'),
  total?: float(name='total', description='The total number of entries returned.', example='2'),
  message?: string(name='message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='96D7C0AB-DCE5-5E82-96B8-4725E1706BB1'),
}

model ListApiDestinationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApiDestinationsResponseBody(name='body'),
}

/**
 * @summary Queries a list of API destinations.
 *
 * @description You can use this API operation to query a list of API destinations.
 *
 * @param request ListApiDestinationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListApiDestinationsResponse
 */
async function listApiDestinationsWithOptions(request: ListApiDestinationsRequest, runtime: Util.RuntimeOptions): ListApiDestinationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDestinationNamePrefix)) {
    body['apiDestinationNamePrefix'] = request.apiDestinationNamePrefix;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'ListApiDestinations',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/api-destination/listApiDestinations',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of API destinations.
 *
 * @description You can use this API operation to query a list of API destinations.
 *
 * @param request ListApiDestinationsRequest
 * @return ListApiDestinationsResponse
 */
async function listApiDestinations(request: ListApiDestinationsRequest): ListApiDestinationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApiDestinationsWithOptions(request, runtime);
}




/**
  Connection Controller apis:
    * createConnection    *
    * deleteConnection    *
    * updateConnection    *
    * getConnection       *
    * selectOneConnection *
    * listConnections     *
    * listEnumsResponse   *
*/

model CreateConnectionRequest {
  authParameters?: {
    apiKeyAuthParameters?: {
      apiKeyName?: string(name='apiKeyName', description='The key of the API key.', example='Token'),
      apiKeyValue?: string(name='apiKeyValue', description='The value of the API key.', example='adkjnakddh****'),
    }(name='apiKeyAuthParameters', description='The parameters that are configured for API key authentication.'),
    authorizationType?: string(name='authorizationType', description='The authentication type. Valid values:\n
      BASIC_AUTH: basic authentication.\n
      Introduction: Basic authentication is a simple authentication scheme built into the HTTP protocol. When you use the HTTP protocol for communications, the authentication method that the HTTP server uses to authenticate user identities on the client is defined in the protocol. The request header is in the Authorization: Basic Base64-encoded string (Username:Password) format.\n
      1.  Username and Password are required\n
      API_KEY_AUTH: API key authentication.\n
      Introduction: The request header is in the Token: Token value format.\n
      *   ApiKeyName and ApiKeyValue are required.\n
      OAUTH_AUTH: OAuth authentication.\n
      Introduction: OAuth2.0 is an authentication mechanism. In normal cases, a system that does not use OAuth2.0 can access the resources of the server from the client. To ensure access security, access tokens are used to authenticate users in OAuth 2.0. The client must use an access token to access protected resources. This way, OAuth 2.0 protects resources from being accessed from malicious clients and improves system security.\n
      *   AuthorizationEndpoint, OAuthHttpParameters, and HttpMethod are required.', example='BASIC_AUTH'),
    basicAuthParameters?: {
      password?: string(name='password', description='The password for basic authentication.', example='*******'),
      username?: string(name='username', description='The username for basic authentication.', example='admin'),
    }(name='basicAuthParameters', description='The parameters that are configured for basic authentication.'),
    oauthParameters?: {
      authorizationEndpoint?: string(name='authorizationEndpoint', description='The endpoint that is used to obtain the OAuth token.', example='http://localhost:8080/oauth/token'),
      clientParameters?: {
        clientID?: string(name='clientID', description='The client ID.', example='ClientID'),
        clientSecret?: string(name='clientSecret', description='The client key secret of the application.', example='ClientSecret'),
      }(name='clientParameters', description='The parameters that are configured for the client.'),
      httpMethod?: string(name='httpMethod', description='The HTTP request method. Valid values:\n
        - GET\n
        - POST\n
        - HEAD', example='POST'),
      oauthHttpParameters?: {
        bodyParameters?: [ 
          {
            isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
            key?: string(name='key', description='The key in the request body.', example='name'),
            value?: string(name='value', description='The value of the key in the request body.', example='demo'),
          }
        ](name='bodyParameters', description='The parameters that are configured for the request.'),
        headerParameters?: [ 
          {
            isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
            key?: string(name='key', description='The key in the request header.', example='name'),
            value?: string(name='value', description='The value of the key in the request header.', example='demo'),
          }
        ](name='headerParameters', description='The parameters that are configured for the request header.'),
        queryStringParameters?: [ 
          {
            isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
            key?: string(name='key', description='The key in the request path.', example='name'),
            value?: string(name='value', description='The value of the key in the request path.', example='demo'),
          }
        ](name='queryStringParameters', description='The parameters that are configured for the request path.'),
      }(name='oauthHttpParameters', description='The request parameters for OAuth authentication.'),
    }(name='oauthParameters', description='The parameters that are configured for OAuth authentication.'),
  }(name='authParameters', description='The parameters that are configured for authentication.'),
  connectionName?: string(name='connectionName', description='The name of the connection. The name must be 2 to 127 characters in length.\n
    This parameter is required.', example='connection-name'),
  description?: string(name='description', description='The description of the connection. The description can be up to 255 characters in length.', example='demo'),
  networkParameters?: {
    networkType?: string(name='networkType', description='The network type. Valid values:\n
      PublicNetwork and PrivateNetwork.\n
      *   Note: If you set this parameter to PrivateNetwork, you must configure VpcId, VswitcheId, and SecurityGroupId.\n
      This parameter is required.', example='PublicNetwork'),
    securityGroupId?: string(name='securityGroupId', description='The ID of the security group.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9****'),
    vpcId?: string(name='vpcId', description='The VPC. ID', example='eb-test/vpc-bp1symadadwnwg****'),
    vswitcheId?: string(name='vswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeq****'),
  }(name='networkParameters', description='The parameters that are configured for the network. This parameter is required.'),
}

model CreateConnectionResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  connectionName?: string(name='connectionName', description='The connection name.', example='connection-demo'),
  message?: string(name='message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='7DA60DED-CD36-5837-B848-C01A23D2****'),
}

model CreateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConnectionResponseBody(name='body'),
}

/**
 * @summary Creates a connection.
 *
 * @description You can call this API operation to create a connection.
 *
 * @param request CreateConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateConnectionResponse
 */
async function createConnectionWithOptions(request: CreateConnectionRequest, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.authParameters)) {
    body['authParameters'] = request.authParameters;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.networkParameters)) {
    body['networkParameters'] = request.networkParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/createConnection',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a connection.
 *
 * @description You can call this API operation to create a connection.
 *
 * @param request CreateConnectionRequest
 * @return CreateConnectionResponse
 */
async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionWithOptions(request, runtime);
}

model DeleteConnectionRequest {
  connectionName?: string(name='connectionName', description='The name of the connection that you want to delete. This parameter is required.', example='connection-name'),
}

model DeleteConnectionResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  message?: string(name='message', description='The returned message. If the request is successful, success is returned. If the request failed, an error code is returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='8EF25E37-1750-5D7A-BA56-F8AE081A69C8'),
}

model DeleteConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConnectionResponseBody(name='body'),
}

/**
 * @summary Deletes a connection.
 *
 * @description You can call this API operation to delete a connection.
 *
 * @param request DeleteConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteConnectionResponse
 */
async function deleteConnectionWithOptions(request: DeleteConnectionRequest, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body)
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/deleteConnection',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a connection.
 *
 * @description You can call this API operation to delete a connection.
 *
 * @param request DeleteConnectionRequest
 * @return DeleteConnectionResponse
 */
async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionWithOptions(request, runtime);
}

model UpdateConnectionRequest {
  authParameters?: {
    apiKeyAuthParameters?: {
      apiKeyName?: string(name='apiKeyName', description='The key of the API key.', example='Token'),
      apiKeyValue?: string(name='apiKeyValue', description='The value of the API key.', example='adkjnakddh****'),
    }(name='apiKeyAuthParameters', description='The parameters that are configured for API key authentication.'),
    authorizationType?: string(name='authorizationType', description='The authentication type. Valid values:\n
      BASIC_AUTH: basic authentication.\n
      Introduction: Basic authentication is a simple authentication scheme built into the HTTP protocol. When you use the HTTP protocol for communications, the authentication method that the HTTP server uses to authenticate user identities on the client is defined in the protocol. The request header is in the Authorization: Basic Base64-encoded string (Username:Password) format.\n
      1.  Username and Password are required\n
      API_KEY_AUTH: API key authentication.\n
      Introduction: The request header is in the Token: Token value format.\n
      *   ApiKeyName and ApiKeyValue are required.\n
      OAUTH_AUTH: OAuth authentication.\n
      Introduction: OAuth2.0 is an authentication mechanism. In normal cases, a system that does not use OAuth2.0 can access the resources of the server from the client. To ensure access security, access tokens are used to authenticate users in OAuth 2.0. The client must use an access token to access protected resources. This way, OAuth 2.0 protects resources from being accessed from malicious clients and improves system security.\n
      *   AuthorizationEndpoint, OAuthHttpParameters, and HttpMethod are required.', example='BASIC_AUTH'),
    basicAuthParameters?: {
      password?: string(name='password', description='The password for basic authentication.', example='*******'),
      username?: string(name='username', description='The username for basic authentication.', example='admin'),
    }(name='basicAuthParameters', description='The parameters that are configured for basic authentication.'),
    oauthParameters?: {
      authorizationEndpoint?: string(name='authorizationEndpoint', description='The endpoint that is used to obtain the OAuth token.', example='http://localhost:8080/oauth/token'),
      clientParameters?: {
        clientID?: string(name='clientID', description='The client ID.', example='ClientID'),
        clientSecret?: string(name='clientSecret', description='The client key secret of the application.', example='ClientSecret'),
      }(name='clientParameters', description='The parameters that are configured for the client.'),
      httpMethod?: string(name='httpMethod', description='The HTTP request method. Valid values:\n
        - GET\n
        - POST\n
        - HEAD', example='POST'),
      oauthHttpParameters?: {
        bodyParameters?: [ 
          {
            isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
            key?: string(name='key', description='The key in the request body.', example='name'),
            value?: string(name='value', description='The value of the key in the request body.', example='demo'),
          }
        ](name='bodyParameters', description='The parameters that are configured for the request.'),
        headerParameters?: [ 
          {
            isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
            key?: string(name='key', description='The key in the request header.', example='name'),
            value?: string(name='value', description='The value of the key in the request header.', example='demo'),
          }
        ](name='headerParameters', description='The parameters that are configured for the request header.'),
        queryStringParameters?: [ 
          {
            isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
            key?: string(name='key', description='The key in the request path.', example='name'),
            value?: string(name='value', description='The value of the key in the request path.', example='demo'),
          }
        ](name='queryStringParameters', description='The parameters that are configured for the request path.'),
      }(name='oauthHttpParameters', description='The request parameters for OAuth authentication.'),
    }(name='oauthParameters', description='The parameters that are configured for OAuth authentication.'),
  }(name='authParameters', description='The parameters that are configured for authentication.'),
  connectionName?: string(name='connectionName', description='The name of the connection. The name must be 2 to 127 characters in length.\n
    This parameter is required.', example='connection-name'),
  description?: string(name='description', description='The description of the connection. The description can be up to 255 characters in length.', example='demo'),
  networkParameters?: {
    networkType?: string(name='networkType', description='The network type. Valid values:\n
      PublicNetwork and PrivateNetwork.\n
      *   Note: If you set this parameter to PrivateNetwork, you must configure VpcId, VswitcheId, and SecurityGroupId.\n
      This parameter is required.', example='PublicNetwork'),
    securityGroupId?: string(name='securityGroupId', description='The ID of the security group.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9****'),
    vpcId?: string(name='vpcId', description='The VPC. ID', example='eb-test/vpc-bp1symadadwnwg****'),
    vswitcheId?: string(name='vswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeq****'),
  }(name='networkParameters', description='The parameters that are configured for the network. This parameter is required.'),
}

model UpdateConnectionResponseBody = {
  code?: string(name='code', description='The returned response code.', example='Success'),
  message?: string(name='message', description='The returned message.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='8346BE8F-40F3-533D-A0B8-1359C31BD5BA'),
}

model UpdateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConnectionResponseBody(name='body'),
}

/**
 * @summary Updates a connection.
 *
 * @description You can call this API operation to update a connection.
 *
 * @param request UpdateConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateConnectionResponse
 */
async function updateConnectionWithOptions(request: UpdateConnectionRequest, runtime: Util.RuntimeOptions): UpdateConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.authParameters)) {
    body['authParameters'] = request.authParameters;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.networkParameters)) {
    body['networkParameters'] = request.networkParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnection',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/updateConnection',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a connection.
 *
 * @description You can call this API operation to update a connection.
 *
 * @param request UpdateConnectionRequest
 * @return UpdateConnectionResponse
 */
async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionWithOptions(request, runtime);
}

model GetConnectionRequest {
  connectionName?: string(name='connectionName', description='The connection name. This parameter is required.', example='connection-name'),
}

model GetConnectionResponseBody = {
  code?: string(name='code', description='The returned response code. The value Success indicates that the request is successful.', example='Success'),
  connections?: [ 
    {
      authParameters?: {
        apiKeyAuthParameters?: {
          apiKeyName?: string(name='apiKeyName', description='The API key.', example='Token'),
          apiKeyValue?: string(name='apiKeyValue', description='The value of the API key.', example='asdkjnqkwejooa'),
        }(name='apiKeyAuthParameters', description='The parameters that are configured for API key authentication.'),
        authorizationType?: string(name='authorizationType', description='The authentication type. Valid values:\n

          - BASIC_AUTH: basic authentication.\n

          - API_KEY_AUTH: API key authentication.\n

          - OAUTH_AUTH: OAuth authentication.', example='BASIC_AUTH'),
        basicAuthParameters?: {
          password?: string(name='password', description='The password for basic authentication.', example='admin'),
          username?: string(name='username', description='The username for basic authentication.', example='admin'),
        }(name='basicAuthParameters', description='The parameters that are configured for basic authentication.'),
        oauthParameters?: {
          authorizationEndpoint?: string(name='authorizationEndpoint', description='The endpoint that is used to obtain the OAuth token.', example='http://localhost:8080/oauth/token'),
          clientParameters?: {
            clientID?: string(name='clientID', description='The client ID.', example='ClientID'),
            clientSecret?: string(name='clientSecret', description='The client key secret of the application.', example='ClientSecret'),
          }(name='clientParameters', description='The parameters that are configured for the client.'),
          httpMethod?: string(name='httpMethod', description='The HTTP request method. Valid values:

            - GET

            - POST

            - HEAD', example='POST'),
          oauthHttpParameters?: {
            bodyParameters?: [ 
              {
                isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                key?: string(name='key', description='The key in the request body.', example='name'),
                value?: string(name='value', description='The value of the key in the request body.', example='demo'),
              }
            ](name='bodyParameters', description='The parameters that are configured for the request.'),
            headerParameters?: [ 
              {
                isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                key?: string(name='key', description='The key in the request header.', example='name'),
                value?: string(name='value', description='The value of the key in the request header.', example='demo'),
              }
            ](name='headerParameters', description='The parameters that are configured for the request header.'),
            queryStringParameters?: [ 
              {
                isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                key?: string(name='key', description='The key in the request path.', example='name'),
                value?: string(name='value', description='The value of the key in the request path.', example='demo'),
              }
            ](name='queryStringParameters', description='The parameters that are configured for the request path.'),
          }(name='oauthHttpParameters', description='The request parameters for OAuth authentication.'),
        }(name='oauthParameters', description='The parameters that are configured for OAuth authentication.'),
      }(name='authParameters', description='The parameters that are configured for authentication.'),
      connectionName?: string(name='connectionName', description='The connection name.', example='connection-name'),
      description?: string(name='description', description='The connection description.', example='The description of the connection.'),
      gmtCreate?: long(name='gmtCreate', description='The time when the connection was created.', example='1592838994234'),
      id?: integer(name='id', description='The connection ID.', example='1141093'),
      networkParameters?: {
        networkType?: string(name='networkType', description='The network type. Valid values:PublicNetwork and PrivateNetwork.', example='PublicNetwork'),
        securityGroupId?: string(name='securityGroupId', description='The security group ID.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
        vpcId?: string(name='vpcId', description='The virtual private cloud (VPC) ID.', example='eb-test/vpc-bp1symadadwnwgmqud'),
        vswitcheId?: string(name='vswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
      }(name='networkParameters'),
    }
  ](name='connections', description='The value of the key in the request path.'),
  message?: string(name='message', description='The returned message.', example='success'),
  requestId?: string(name='requestId', description='The returned request ID.', example='34AD682D-5B91-5773-8132-AA38C130****'),
}

model GetConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a connection.
 *
 * @description You can call this API operation to query the configurations of a connection.
 *
 * @param request GetConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetConnectionResponse
 */
async function getConnectionWithOptions(request: GetConnectionRequest, runtime: Util.RuntimeOptions): GetConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'GetConnection',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/getConnection',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a connection.
 *
 * @description You can call this API operation to query the configurations of a connection.
 *
 * @param request GetConnectionRequest
 * @return GetConnectionResponse
 */
async function getConnection(request: GetConnectionRequest): GetConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionWithOptions(request, runtime);
}

/**
 * @summary Queries the configurations of a connection.
 *
 * @description You can call this API operation to query the configurations of a connection.
 *
 * @param request GetConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetConnectionResponse
 */
async function selectOneConnectionWithOptions(request: GetConnectionRequest, runtime: Util.RuntimeOptions): GetConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.connectionName)) {
    body['connectionName'] = request.connectionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'selectOneConnection',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/selectOneConnection',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a connection.
 *
 * @description You can call this API operation to query the configurations of a connection.
 *
 * @param request GetConnectionRequest
 * @return GetConnectionResponse
 */
async function selectOneConnection(request: GetConnectionRequest): GetConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return selectOneConnectionWithOptions(request, runtime);
}

model ListConnectionsRequest {
  connectionNamePrefix?: string(name='connectionNamePrefix', description='The key word that you specify to query connections. Connections can be queried by prefixes.', example='connection-name'),
  maxResults?: integer(name='maxResults', description='The maximum number of entries to be returned in a single call. You can use this parameter and the NextToken parameter to implement paging.\n
    *   Default value: 10.', example='10'),
  nextToken?: string(name='nextToken', description='If you set the Limit parameter and excess return values exist, this parameter is returned.\n
    *   Default value: 0.', example='0'),
}

model ListConnectionsResponseBody = {
  code?: string(name='code', description='The HTTP status code. The value Success indicates that the request is successful.', example='Success'),
  connections?: [ 
    {
      authParameters?: {
        apiKeyAuthParameters?: {
          apiKeyName?: string(name='apiKeyName', description='The API key.', example='Token'),
          apiKeyValue?: string(name='apiKeyValue', description='The value of the API key.', example='asdkjnqkwejooa'),
        }(name='apiKeyAuthParameters', description='The parameters that are configured for API key authentication.'),
        authorizationType?: string(name='authorizationType', description='The authentication type. Valid values:\n

          - BASIC_AUTH: basic authentication.\n

          - API_KEY_AUTH: API key authentication.\n

          - OAUTH_AUTH: OAuth authentication.', example='BASIC_AUTH'),
        basicAuthParameters?: {
          password?: string(name='password', description='The password for basic authentication.', example='admin'),
          username?: string(name='username', description='The username for basic authentication.', example='admin'),
        }(name='basicAuthParameters', description='The parameters that are configured for basic authentication.'),
        oauthParameters?: {
          authorizationEndpoint?: string(name='authorizationEndpoint', description='The endpoint that is used to obtain the OAuth token.', example='http://localhost:8080/oauth/token'),
          clientParameters?: {
            clientID?: string(name='clientID', description='The client ID.', example='ClientID'),
            clientSecret?: string(name='clientSecret', description='The client key secret of the application.', example='ClientSecret'),
          }(name='clientParameters', description='The parameters that are configured for the client.'),
          httpMethod?: string(name='httpMethod', description='The HTTP request method. Valid values:

            - GET

            - POST

            - HEAD', example='POST'),
          oauthHttpParameters?: {
            bodyParameters?: [ 
              {
                isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                key?: string(name='key', description='The key in the request body.', example='name'),
                value?: string(name='value', description='The value of the key in the request body.', example='demo'),
              }
            ](name='bodyParameters', description='The parameters that are configured for the request.'),
            headerParameters?: [ 
              {
                isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                key?: string(name='key', description='The key in the request header.', example='name'),
                value?: string(name='value', description='The value of the key in the request header.', example='demo'),
              }
            ](name='headerParameters', description='The parameters that are configured for the request header.'),
            queryStringParameters?: [ 
              {
                isValueSecret?: string(name='isValueSecret', description='Indicates whether authentication is enabled.', example='false'),
                key?: string(name='key', description='The key in the request path.', example='name'),
                value?: string(name='value', description='The value of the key in the request path.', example='demo'),
              }
            ](name='queryStringParameters', description='The parameters that are configured for the request path.'),
          }(name='oauthHttpParameters', description='The request parameters for OAuth authentication.'),
        }(name='oauthParameters', description='The parameters that are configured for OAuth authentication.'),
      }(name='authParameters', description='The parameters that are configured for authentication.'),
      connectionName?: string(name='connectionName', description='The connection name.', example='connection-name'),
      description?: string(name='description', description='The connection description.', example='The description of the connection.'),
      gmtCreate?: long(name='gmtCreate', description='The time when the connection was created.', example='1592838994234'),
      id?: integer(name='id', description='The connection ID.', example='1141093'),
      networkParameters?: {
        networkType?: string(name='networkType', description='The network type. Valid values:PublicNetwork and PrivateNetwork.', example='PublicNetwork'),
        securityGroupId?: string(name='securityGroupId', description='The security group ID.', example='eb-167adad548759-security_grop/sg-bp1addad26peuh9qh9rtyb'),
        vpcId?: string(name='vpcId', description='The virtual private cloud (VPC) ID.', example='eb-test/vpc-bp1symadadwnwgmqud'),
        vswitcheId?: string(name='vswitcheId', description='The vSwitch ID.', example='vsw-bp1iu4x7aeradadown1og8,vsw-bp193sqmadadlaszpeqbt2c'),
      }(name='networkParameters'),
    }
  ](name='connections', description='The value of the key in the request path.'),
  maxResults?: float(name='maxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='nextToken', description='If excess return values exist, this parameter is returned.', example='0'),
  total?: float(name='total', description='The total number of entries returned.', example='1'),
  message?: string(name='message', description='The message returned.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.', example='E3619976-8714-5D88-BBA2-6983D798A8BB'),
}

model ListConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectionsResponseBody(name='body'),
}

/**
 * @summary Queries connections.
 *
 * @description You can call this API operation to query connections.
 *
 * @param request ListConnectionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListConnectionsResponse
 */
async function listConnectionsWithOptions(request: ListConnectionsRequest, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.connectionNamePrefix)) {
    body['connectionNamePrefix'] = request.connectionNamePrefix;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['maxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['nextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/listConnections',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries connections.
 *
 * @description You can call this API operation to query connections.
 *
 * @param request ListConnectionsRequest
 * @return ListConnectionsResponse
 */
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionsWithOptions(request, runtime);
}

enum AuthorizationTypeEnums : string {
  API_KEY_AUTH(name="API_KEY_AUTH", value="API_KEY_AUTH"),
  BASIC_AUTH(name="BASIC_AUTH", value="BASIC_AUTH"),
  OAUTH_AUTH(name="OAUTH_AUTH", value="OAUTH_AUTH"),
}

enum NetworkTypeEnum : string {
  PUBLIC_NETWORK(name="PUBLIC_NETWORK", value="PublicNetwork"),
  PRIVATE_NETWORK(name="PRIVATE_NETWORK", value="PrivateNetwork")
}

model ListEnumsResponseResponseBody = {
  authorizationTypeEnums?: AuthorizationTypeEnums,
  networkTypeEnums?: NetworkTypeEnum,
  code?: string(name='code', description='The returned response code.', example='Success'),
  message?: string(name='message', description='The returned message.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='8346BE8F-40F3-533D-A0B8-1359C31BD5BA'),
}

model ListEnumsResponseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConnectionResponseBody(name='body'),
}

/**
 * @summary Updates a connection.
 *
 * @description You can call this API operation to update a connection.
 *
 * @return ListEnumsResponseResponse
 */
async function listEnumsResponse(): ListEnumsResponseResponse {
  var runtime = new Util.RuntimeOptions{};
  var body : map[string]any = {};
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toJSONString(body),
  };
  var params = new OpenApi.Params{
    action = 'listEnumsResponse',
    version = '2024-07-01',
    protocol = 'HTTP',
    pathname = '/connection/listEnumsResponse',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

// static async function main(args: [string]): void{
//   var runtime = new Util.RuntimeOptions{};
// }
